{"ast":null,"code":"class Api {\n  constructor(baseUrl, headers) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _fetchApi(url, method, additionalHeaders, body) {\n    const fetchOptions = {\n      method: method,\n      headers: { ...this._headers,\n        ...additionalHeaders\n      }\n    };\n\n    if (body) {\n      fetchOptions.body = JSON.stringify(body);\n    }\n\n    return fetch(`${this._baseUrl}${url}`, fetchOptions).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  getInitialsCards() {\n    return this._fetchApi('/cards', \"GET\");\n  }\n\n  postCard(card) {\n    return this._fetchApi('/cards', 'POST', {\n      'Content-Type': 'application/json'\n    }, card);\n  }\n\n  removeCard(cardId) {\n    return this._fetchApi(`/cards/${cardId}`, 'DELETE');\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return this._fetchApi(`/cards/likes/${cardId}`, `${isLiked ? 'PUT' : 'DELETE'}`);\n  } //Операции с данными пользователя\n\n\n  getUserInfo() {\n    return this._fetchApi('/users/me', 'GET');\n  }\n\n  editUserInfo(info) {\n    return this._fetchApi('/users/me', \"PATCH\", {\n      'Content-Type': 'application/json'\n    }, info);\n  }\n\n  editAvatar(link) {\n    return this._fetchApi('/users/me/avatar', 'PATCH', {\n      'Content-Type': 'application/json'\n    }, link);\n  }\n\n}\n\nconst api = new Api(\"https://mesto.nomoreparties.co/v1/cohort-16\", {\n  authorization: \"0100295d-ffab-4dd9-a2ae-64af071cc3da\"\n});\nexport default api;","map":{"version":3,"sources":["C:/Users/Triger bot/Documents/GitHub/mesto-react/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_fetchApi","url","method","additionalHeaders","body","fetchOptions","JSON","stringify","fetch","then","res","ok","json","Promise","reject","status","statusText","getInitialsCards","postCard","card","removeCard","cardId","changeLikeCardStatus","isLiked","getUserInfo","editUserInfo","info","editAvatar","link","api","authorization"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAC5B,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,QAAL,GAAgBF,OAAhB;AACD;;AACDG,EAAAA,SAAS,CAACC,GAAD,EAAMC,MAAN,EAAcC,iBAAd,EAAiCC,IAAjC,EAAuC;AAC9C,UAAMC,YAAY,GAAG;AACnBH,MAAAA,MAAM,EAAEA,MADW;AAEnBL,MAAAA,OAAO,EAAE,EAAE,GAAI,KAAKE,QAAX;AAAqB,WAAGI;AAAxB;AAFU,KAArB;;AAIA,QAAIC,IAAJ,EAAU;AACRC,MAAAA,YAAY,CAACD,IAAb,GAAoBE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAApB;AACD;;AAED,WAAOI,KAAK,CAAE,GAAE,KAAKV,QAAS,GAAEG,GAAI,EAAxB,EAA2BI,YAA3B,CAAL,CAA8CI,IAA9C,CAAmDC,GAAG,IAAI;AAC/D,UAAIA,GAAG,CAACC,EAAR,EAAY;AACV,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;;AAED,aAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,MAAKL,GAAG,CAACM,UAAW,EAAzD,CAAP;AACD,KANM,CAAP;AAOD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKjB,SAAL,CAAe,QAAf,EAAyB,KAAzB,CAAP;AACD;;AACDkB,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,WAAO,KAAKnB,SAAL,CAAe,QAAf,EAAyB,MAAzB,EAAiC;AAAE,sBAAgB;AAAlB,KAAjC,EAAyEmB,IAAzE,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAACC,MAAD,EAAS;AACjB,WAAO,KAAKrB,SAAL,CAAgB,UAASqB,MAAO,EAAhC,EAAmC,QAAnC,CAAP;AACD;;AAEDC,EAAAA,oBAAoB,CAACD,MAAD,EAASE,OAAT,EAAkB;AACpC,WAAO,KAAKvB,SAAL,CAAgB,gBAAeqB,MAAO,EAAtC,EAA0C,GAAEE,OAAO,GAAG,KAAH,GAAW,QAAS,EAAvE,CAAP;AACD,GApCO,CAuCR;;;AACAC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKxB,SAAL,CAAe,WAAf,EAA4B,KAA5B,CAAP;AACD;;AAEDyB,EAAAA,YAAY,CAACC,IAAD,EAAO;AACjB,WAAO,KAAK1B,SAAL,CAAe,WAAf,EAA4B,OAA5B,EAAqC;AAAE,sBAAgB;AAAlB,KAArC,EAA6E0B,IAA7E,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,WAAO,KAAK5B,SAAL,CAAe,kBAAf,EAAmC,OAAnC,EAA4C;AAAE,sBAAgB;AAAlB,KAA5C,EAAoF4B,IAApF,CAAP;AACD;;AAlDO;;AAqDV,MAAMC,GAAG,GAAG,IAAInC,GAAJ,CAAQ,6CAAR,EAAuD;AACjEoC,EAAAA,aAAa,EAAE;AADkD,CAAvD,CAAZ;AAIA,eAAeD,GAAf","sourcesContent":["class Api {\r\n  constructor(baseUrl, headers) {\r\n    this._baseUrl = baseUrl;\r\n    this._headers = headers;\r\n  }\r\n  _fetchApi(url, method, additionalHeaders, body) {\r\n    const fetchOptions = {\r\n      method: method,\r\n      headers: { ... this._headers, ...additionalHeaders },\r\n    };\r\n    if (body) {\r\n      fetchOptions.body = JSON.stringify(body);\r\n    }\r\n\r\n    return fetch(`${this._baseUrl}${url}`, fetchOptions).then(res => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n\r\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\r\n    });\r\n  }\r\n\r\n  getInitialsCards() {\r\n    return this._fetchApi('/cards', \"GET\");\r\n  }\r\n  postCard(card) {\r\n    return this._fetchApi('/cards', 'POST', { 'Content-Type': 'application/json' }, card);\r\n  }\r\n\r\n  removeCard(cardId) {\r\n    return this._fetchApi(`/cards/${cardId}`, 'DELETE');\r\n  }\r\n\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n    return this._fetchApi(`/cards/likes/${cardId}`, `${isLiked ? 'PUT' : 'DELETE'}`);\r\n  }\r\n\r\n\r\n  //Операции с данными пользователя\r\n  getUserInfo() {\r\n    return this._fetchApi('/users/me', 'GET');\r\n  }\r\n\r\n  editUserInfo(info) {\r\n    return this._fetchApi('/users/me', \"PATCH\", { 'Content-Type': 'application/json' }, info);\r\n  }\r\n\r\n  editAvatar(link) {\r\n    return this._fetchApi('/users/me/avatar', 'PATCH', { 'Content-Type': 'application/json' }, link);\r\n  }\r\n}\r\n\r\nconst api = new Api(\"https://mesto.nomoreparties.co/v1/cohort-16\", {\r\n  authorization: \"0100295d-ffab-4dd9-a2ae-64af071cc3da\",\r\n});\r\n\r\nexport default api\r\n"]},"metadata":{},"sourceType":"module"}