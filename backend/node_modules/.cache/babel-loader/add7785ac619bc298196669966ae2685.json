{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Triger bot\\\\Documents\\\\GitHub\\\\mesto-react\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport Main from './Main';\nimport Footer from './Footer';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport ConfirmDeleteCardPopup from './ConfirmDeleteCardPopup';\nimport api from '../utils/Api';\n\nfunction App() {\n  _s();\n\n  const [isEditProfilePopupOpen, setEditProfilePopupOpen] = useState(false);\n  const [isEditAvatarPopupOpen, setEditAvatarPopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setAddPlacePopupOpen] = useState(false);\n  const [isImagePopupOpen, setImagePopupOpen] = useState(false);\n  const [isConfirmDeleteCardPopupOpen, setConfirmDeleteCardPopupOpen] = useState(false);\n  const [selectedCard, setSelectedCard] = useState({});\n  const [cards, setCards] = useState([]);\n  const [currentUser, setCurrentUser] = useState({});\n  React.useEffect(() => {\n    api.getUserInfo().then(res => {\n      setCurrentUser(res);\n    }).catch(err => console.log(`Ошибка при загрузке информации о пользователе: ${err}`));\n  }, []);\n  useEffect(() => {\n    api.getInitialsCards().then(cards => {\n      setCards(cards);\n    }).catch(err => {\n      console.log(err + ' карточки');\n    });\n  }, []);\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id); // Отправляем запрос в API и получаем обновлённые данные карточки\n\n    api.changeLikeCardStatus(card._id, !isLiked).then(newCard => {\n      // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n      const newCards = cards.map(c => c._id === card._id ? newCard : c); // Обновляем стейт\n\n      setCards(newCards);\n    }).catch(err => console.log(`Ошибка: ${err}`));\n    ;\n  }\n\n  function handleCardDelete(cardToDelete) {\n    api.removeCard(cardToDelete._id).then(() => setCards(cards.filter(card => card !== cardToDelete)));\n  }\n\n  function handleEditAvatarClick() {\n    setEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setEditProfilePopupOpen(true);\n  }\n\n  function handleUpdateUser(userData) {\n    api.editUserInfo(userData).then(newUser => {\n      setCurrentUser(newUser);\n      closeAllPopups();\n    }).catch(err => console.log(`Ошибка: ${err}`));\n  }\n\n  function handleUpdateAvatar(newAvatar) {\n    api.editAvatar(newAvatar).then(newUser => {\n      setCurrentUser(newUser);\n      closeAllPopups();\n    }).catch(err => console.log(`Ошибка: ${err}`));\n  }\n\n  function handleAddPlaceClick() {\n    setAddPlacePopupOpen(true);\n  }\n\n  function closeAllPopups(callback = null) {\n    if (callback) {\n      callback(false);\n    }\n  }\n\n  function handleCardClick(card) {\n    setImagePopupOpen(true);\n    setSelectedCard(card);\n  }\n\n  function handleAddPlace(card) {\n    api.postCard(card).then(newCard => {\n      setCards([newCard, ...cards]);\n      closeAllPopups();\n    }).catch(err => console.log(`Ошибка при добавлении новой карточки: ${err}`));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n      value: currentUser,\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopups.bind(null, setEditAvatarPopupOpen),\n        onUpdateAvatar: handleUpdateAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopups.bind(null, setEditProfilePopupOpen),\n        onUpdateUser: handleUpdateUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopups.bind(null, setAddPlacePopupOpen),\n        onAddPlace: handleAddPlace\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ConfirmDeleteCardPopup, {\n        isOpen: isConfirmDeleteCardPopupOpen,\n        onClose: closeAllPopups.bind(null, setConfirmDeleteCardPopupOpen)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n        card: selectedCard,\n        isOpen: isImagePopupOpen,\n        onClose: closeAllPopups.bind(null, setImagePopupOpen)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        onAddPlace: handleAddPlaceClick,\n        onEditProfile: handleEditProfileClick,\n        onEditAvatar: handleEditAvatarClick,\n        onCardClick: handleCardClick,\n        onLikeClick: handleCardLike,\n        onDeleteClick: handleCardDelete,\n        cards: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), \"   \", console.log(cards)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"3k6pOkPJ2XDQfiVJ1YrUMmldFKk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Triger bot/Documents/GitHub/mesto-react/src/components/App.js"],"names":["React","useState","useEffect","Header","CurrentUserContext","Main","Footer","ImagePopup","EditProfilePopup","EditAvatarPopup","AddPlacePopup","ConfirmDeleteCardPopup","api","App","isEditProfilePopupOpen","setEditProfilePopupOpen","isEditAvatarPopupOpen","setEditAvatarPopupOpen","isAddPlacePopupOpen","setAddPlacePopupOpen","isImagePopupOpen","setImagePopupOpen","isConfirmDeleteCardPopupOpen","setConfirmDeleteCardPopupOpen","selectedCard","setSelectedCard","cards","setCards","currentUser","setCurrentUser","getUserInfo","then","res","catch","err","console","log","getInitialsCards","handleCardLike","card","isLiked","likes","some","i","_id","changeLikeCardStatus","newCard","newCards","map","c","handleCardDelete","cardToDelete","removeCard","filter","handleEditAvatarClick","handleEditProfileClick","handleUpdateUser","userData","editUserInfo","newUser","closeAllPopups","handleUpdateAvatar","newAvatar","editAvatar","handleAddPlaceClick","callback","handleCardClick","handleAddPlace","postCard","bind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nimport Main from './Main';\r\nimport Footer from './Footer';\r\nimport ImagePopup from './ImagePopup';\r\nimport EditProfilePopup from './EditProfilePopup';\r\nimport EditAvatarPopup from './EditAvatarPopup';\r\nimport AddPlacePopup from './AddPlacePopup';\r\nimport ConfirmDeleteCardPopup from './ConfirmDeleteCardPopup';\r\nimport api from '../utils/Api';\r\n\r\nfunction App() {\r\n    const [isEditProfilePopupOpen, setEditProfilePopupOpen] = useState(false);\r\n    const [isEditAvatarPopupOpen, setEditAvatarPopupOpen] = useState(false);\r\n    const [isAddPlacePopupOpen, setAddPlacePopupOpen] = useState(false);\r\n    const [isImagePopupOpen, setImagePopupOpen] = useState(false);\r\n    const [isConfirmDeleteCardPopupOpen, setConfirmDeleteCardPopupOpen] = useState(false);\r\n    const [selectedCard, setSelectedCard] = useState({});\r\n    const [cards, setCards] = useState([]);\r\n    const [currentUser, setCurrentUser] = useState({});\r\n    React.useEffect(() => {\r\n        api\r\n            .getUserInfo()\r\n            .then((res) => {\r\n                setCurrentUser(res);\r\n            })\r\n            .catch((err) =>\r\n                console.log(`Ошибка при загрузке информации о пользователе: ${err}`)\r\n            );\r\n    }, []);\r\n    useEffect(() => {\r\n        api.getInitialsCards()\r\n            .then((cards) => {\r\n                setCards(cards);\r\n\r\n            })\r\n\r\n            .catch((err) => {\r\n                console.log(err + ' карточки');\r\n            })\r\n    }, []);\r\n    function handleCardLike(card) {\r\n        // Снова проверяем, есть ли уже лайк на этой карточке\r\n        const isLiked = card.likes.some(i => i._id === currentUser._id);\r\n        // Отправляем запрос в API и получаем обновлённые данные карточки\r\n        api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\r\n            // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\r\n            const newCards = cards.map((c) => c._id === card._id ? newCard : c);\r\n            // Обновляем стейт\r\n            setCards(newCards);\r\n        }).catch((err) => console.log(`Ошибка: ${err}`));;\r\n    }\r\n    function handleCardDelete(cardToDelete) {\r\n\r\n        api.removeCard(cardToDelete._id)\r\n            .then(() => setCards(cards.filter((card) => card !== cardToDelete)))\r\n\r\n    }\r\n    function handleEditAvatarClick() {\r\n        setEditAvatarPopupOpen(true);\r\n    }\r\n    function handleEditProfileClick() {\r\n        setEditProfilePopupOpen(true);\r\n    }\r\n    function handleUpdateUser(userData) {\r\n        api\r\n            .editUserInfo(userData)\r\n            .then((newUser) => {setCurrentUser(newUser);closeAllPopups();})\r\n            .catch((err) => console.log(`Ошибка: ${err}`));\r\n        \r\n    }\r\n    function handleUpdateAvatar(newAvatar) {\r\n        api.editAvatar(newAvatar)\r\n        .then((newUser) => {setCurrentUser(newUser);closeAllPopups();})\r\n            .catch((err) => console.log(`Ошибка: ${err}`));\r\n        \r\n    }\r\n   \r\n    function handleAddPlaceClick() {\r\n        setAddPlacePopupOpen(true);\r\n\r\n    }\r\n    function closeAllPopups(callback = null) {\r\n        if (callback) {\r\n            callback(false);\r\n        }\r\n    }\r\n\r\n    function handleCardClick(card) {\r\n        setImagePopupOpen(true);\r\n        setSelectedCard(card);\r\n    }\r\n    function handleAddPlace(card) {\r\n        \r\n        api\r\n          .postCard(card)\r\n          .then((newCard) => {setCards([newCard, ...cards]);closeAllPopups();})\r\n          .catch((err) =>\r\n            console.log(`Ошибка при добавлении новой карточки: ${err}`)\r\n          )\r\n        \r\n      }\r\n\r\n\r\n    return (\r\n        <>\r\n            <CurrentUserContext.Provider value={currentUser}>\r\n                <Header />\r\n                <EditAvatarPopup\r\n                    isOpen={isEditAvatarPopupOpen}\r\n                    onClose={closeAllPopups.bind(null, setEditAvatarPopupOpen)}\r\n                    onUpdateAvatar={handleUpdateAvatar}\r\n                />\r\n\r\n                <EditProfilePopup\r\n                    isOpen={isEditProfilePopupOpen}\r\n                    onClose={closeAllPopups.bind(null, setEditProfilePopupOpen)}\r\n                    onUpdateUser={handleUpdateUser}\r\n\r\n                />\r\n\r\n                <AddPlacePopup\r\n                    isOpen={isAddPlacePopupOpen}\r\n                    onClose={closeAllPopups.bind(null, setAddPlacePopupOpen)}\r\n                    onAddPlace={handleAddPlace}\r\n                />\r\n\r\n                <ConfirmDeleteCardPopup\r\n                    isOpen={isConfirmDeleteCardPopupOpen}\r\n                    onClose={closeAllPopups.bind(null, setConfirmDeleteCardPopupOpen)}\r\n\r\n                />\r\n                <ImagePopup\r\n                    card={selectedCard}\r\n                    isOpen={isImagePopupOpen}\r\n                    onClose={closeAllPopups.bind(null, setImagePopupOpen)}\r\n                />\r\n                <Main\r\n                    onAddPlace={handleAddPlaceClick}\r\n                    onEditProfile={handleEditProfileClick}\r\n                    onEditAvatar={handleEditAvatarClick}\r\n                    onCardClick={handleCardClick}\r\n                    onLikeClick={handleCardLike}\r\n                    onDeleteClick={handleCardDelete}\r\n                    cards={cards}\r\n                />\r\n                <Footer />   {console.log(cards)}\r\n            </CurrentUserContext.Provider>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}